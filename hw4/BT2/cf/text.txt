The data is all binary whether it represents text or floats or ints or whatever. You don't have to assume it is ints or floats just take it as bytes of data and read in chunks of whatever size bytes you want to deal with. Read in a chunk of size X bytes from the source file and then write out size X bytes to the destination file.

You don't really need to detect the size of the file. You just have your loop that continuously reads/writes data until there is no more data in the source file to read. At that point you can exit the loop. If you code the exit condition for this loop the wrong way, then you may need to do one more write after the loop. If you do it correctly, then you won't.

Use fread and fwrite and not the other functions that are geared towards text. These other functions would have issues dealing with embedded nulls (zeroes) in the source file and would cause trouble.

The data is all binary whether it represents text or floats or ints or whatever. You don't have to assume it is ints or floats just take it as bytes of data and read in chunks of whatever size bytes you want to deal with. Read in a chunk of size X bytes from the source file and then write out size X bytes to the destination file.

You don't really need to detect the size of the file. You just have your loop that continuously reads/writes data until there is no more data in the source file to read. At that point you can exit the loop. If you code the exit condition for this loop the wrong way, then you may need to do one more write after the loop. If you do it correctly, then you won't.

Use fread and fwrite and not the other functions that are geared towards text. These other functions would have issues dealing with embedded nulls (zeroes) in the source file and would cause trouble.

The data is all binary whether it represents text or floats or ints or whatever. You don't have to assume it is ints or floats just take it as bytes of data and read in chunks of whatever size bytes you want to deal with. Read in a chunk of size X bytes from the source file and then write out size X bytes to the destination file.

You don't really need to detect the size of the file. You just have your loop that continuously reads/writes data until there is no more data in the source file to read. At that point you can exit the loop. If you code the exit condition for this loop the wrong way, then you may need to do one more write after the loop. If you do it correctly, then you won't.

Use fread and fwrite and not the other functions that are geared towards text. These other functions would have issues dealing with embedded nulls (zeroes) in the source file and would cause trouble.

The data is all binary whether it represents text or floats or ints or whatever. You don't have to assume it is ints or floats just take it as bytes of data and read in chunks of whatever size bytes you want to deal with. Read in a chunk of size X bytes from the source file and then write out size X bytes to the destination file.

You don't really need to detect the size of the file. You just have your loop that continuously reads/writes data until there is no more data in the source file to read. At that point you can exit the loop. If you code the exit condition for this loop the wrong way, then you may need to do one more write after the loop. If you do it correctly, then you won't.

Use fread and fwrite and not the other functions that are geared towards text. These other functions would have issues dealing with embedded nulls (zeroes) in the source file and would cause trouble.

The data is all binary whether it represents text or floats or ints or whatever. You don't have to assume it is ints or floats just take it as bytes of data and read in chunks of whatever size bytes you want to deal with. Read in a chunk of size X bytes from the source file and then write out size X bytes to the destination file.

You don't really need to detect the size of the file. You just have your loop that continuously reads/writes data until there is no more data in the source file to read. At that point you can exit the loop. If you code the exit condition for this loop the wrong way, then you may need to do one more write after the loop. If you do it correctly, then you won't.

Use fread and fwrite and not the other functions that are geared towards text. These other functions would have issues dealing with embedded nulls (zeroes) in the source file and would cause trouble.

The data is all binary whether it represents text or floats or ints or whatever. You don't have to assume it is ints or floats just take it as bytes of data and read in chunks of whatever size bytes you want to deal with. Read in a chunk of size X bytes from the source file and then write out size X bytes to the destination file.

You don't really need to detect the size of the file. You just have your loop that continuously reads/writes data until there is no more data in the source file to read. At that point you can exit the loop. If you code the exit condition for this loop the wrong way, then you may need to do one more write after the loop. If you do it correctly, then you won't.

Use fread and fwrite and not the other functions that are geared towards text. These other functions would have issues dealing with embedded nulls (zeroes) in the source file and would cause trouble.
The data is all binary whether it represents text or floats or ints or whatever. You don't have to assume it is ints or floats just take it as bytes of data and read in chunks of whatever size bytes you want to deal with. Read in a chunk of size X bytes from the source file and then write out size X bytes to the destination file.

You don't really need to detect the size of the file. You just have your loop that continuously reads/writes data until there is no more data in the source file to read. At that point you can exit the loop. If you code the exit condition for this loop the wrong way, then you may need to do one more write after the loop. If you do it correctly, then you won't.

Use fread and fwrite and not the other functions that are geared towards text. These other functions would have issues dealing with embedded nulls (zeroes) in the source file and would cause trouble.
END!
 